import java.util.ArrayList;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    private ArrayList<ArrayList<Integer>> result = new  ArrayList<ArrayList<Integer>>();
    public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
        if(pRoot == null) return result;
        ArrayList<TreeNode> parent = new ArrayList<>();
        parent.add(pRoot);
        printline(parent, 0);
        return result;
    }
    
    // 树的的结构一般使用的都是递归算来实现的
    public void printline(ArrayList<TreeNode> nodes, int tim){
        if(nodes.size() == 0 || nodes == null) return;
        ArrayList<TreeNode> res = new ArrayList<>();
        ArrayList<Integer> list = new ArrayList<>();
        TreeNode temp;
        for(int i=nodes.size()-1; i>=0; i--){
            temp = nodes.get(i);
            list.add(temp.val);
            if(tim % 2 == 0){
              if(temp.left != null) res.add(temp.left);
              if(temp.right != null) res.add(temp.right);     
            }else{
                if(temp.right != null) res.add(temp.right);
                if(temp.left != null) res.add(temp.left);
            }
        }
        result.add(list);
        printline(res, tim+1);
    }

}
