/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null) {
            return null;
        }
        Node cur = head;
        while(cur != null) {
            Node next = cur.next;
            Node newNode = new Node(cur.val);
            newNode.next = next;
            cur.next = newNode;
            cur = next;
        }
        Node oldCur = head;
        while(oldCur != null) {
            Node newCur = oldCur.next;
            if(oldCur.random != null) {
                newCur.random = oldCur.random.next;
            }
            oldCur = oldCur.next.next;
        }
        oldCur = head;
        Node newHead = head.next;
        while(oldCur != null) {
            Node newCur = oldCur.next;
            oldCur.next = newCur.next;
            if(newCur.next != null) {
                newCur.next = newCur.next.next;
            }
            oldCur = oldCur.next;
        }
        return newHead;
    }
}
