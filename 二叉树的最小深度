/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
        if(root == null) {
            return 0;
        }
        if(root.left == null && root.right == null)  {
            return 1;
        }
        int leftH = minDepth(root.left);
        int rightH = minDepth(root.right);
        //当 root 节点左右孩子有一个为空时，返回不为空的孩子节点的深度
        //当 root 节点左右孩子都不为空时，返回左右孩子较小深度的节点值
        if(root.left == null || root.right == null) {
            return leftH + rightH + 1;
        } else {
            return  Math.min(leftH,rightH) + 1;
        }
    }
}
